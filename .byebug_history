continue
x.errors
x.error
x
x.flash
x
x.methods
x
x[:flash]
x.flash
x.error
x
x.errors.full_messages
x.errors
x
x = resource
resource
resources
continue
ss
continue
@post
continue
@psot
continue
@post
continue
params
continue
params
continue
params
continue
params
continue
@hash
continue
@hash
continue
@hash
continue
x
x.search('p').remove
x
x.text.slice!(0..60)
x = span
span
span.text.slice(0..60)
span.text.class
span.text
span.text.clas
span
continue
span
continue
span
span.text.slice!(300..-1)
span.text.splice!(300..-1)
span.text
span
span.children.text.slice(200..-1)
span.children.text
span.childre.text
span.children
span
continue
span.methods
x = span.text
span
continue
params.has_key?("love_count")
params.has_key("love_count")
params
continue
params
continue
params.has_key?("love_count")
params.has_value?(:love_count)
params[:love_count].has_value?
params[:love_count].class
params[:love_count]
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
@post
params
continue
params
continue
params
continue
@post
params
continue
only_image
continue
only_image
continue
only_image
continue
post_love
post
continue
object
img
continue
object
img
continue
 returned_span.empty?
 returned_span.nil?
 returned_span
continue
content
continue
img.to_html
img
img.add_child(returned_span)
img
img.text?
object.text?
object.nodes
img
img.parent
object.remove_attribute(img)
object
img.node_name
object
continue
object.to_html
object
x
x.remove_attribute('span')
x.remove_attribute(object.css('span').first)
x.children.delete
x,children.delete
x
object.methods
object
x.children
x
x.to_html
x
x = img
img.to_html
img
img << returned_span
img
continue
returned_span
continue
returned_span
continue
returned_span
continue
spans
returned_span
continue
returned_span
img
continue
returned_text
continue
spans.to_html
spans.text
span
spans.text
span
spans.count
spans.cpunt
spans
object
continue
span
continue
img
span.text.length
span.text
span
continue
object.text << "..."
object.text
object,text
object
object.text << "...."
str
p
continue
object
continue
object
object.text
object.span
object.count
object
img
p
object
continue
object
continue
span.to_html
span.text
span
continue
span
continue
span
continue
object.css('span').count
continue
temp.last.text
x
x.length
x
x = temp.first.text
temp.first.text
temp.first
continue
strn
continue
temp
strn.to_html
strn
c
x
x = object.css('span')
continue
s
x
s = x.map { |c| s << c.text }
s = ""
c = x.map { |s| c << s.text }
x.last.text
x = object.css('span')
object.css('span').map { |n| p n.text }
object.css('span')
object
continue
img
object
continue
post_img
post
continue
